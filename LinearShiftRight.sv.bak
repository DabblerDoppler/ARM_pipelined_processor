module LinearShiftRight #(parameter SHIFT = 1) (in, enable, out);
	parameter WIDTH = 64;
	input logic [WIDTH-1:0] in;
	input logic enable;
	output logic [WIDTH-1:0] out;
	
	initial assert (SHIFT > 0 && WIDTH > 0);
	
	genvar i;
	
	generate
	
		for(i=0; i < SHIFT; i++) begin: zeroLoop
			var [0:1] in0;
			in0[0] = in[i];
			in0[1] = 0;
			mux_recursive thisMux #(.WIDTH = 2) (.in(in0), .read(enable), .out[i]);
	
		for(i=SHIFT; i < WIDTH; i++) begin : shiftLoop
			var [0:1] in1;
			in1[0] = in[i];
			in1[1] = in[i-SHIFT];
			mux_recursive thisMux #(.WIDTH = 2) (.in(in1, .read(enable), .out[i]) 
		end
	
	endgenerate


endmodule