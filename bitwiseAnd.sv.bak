
`timescale 1ns/1ns

module #(parameter WIDTH=64) bitwiseAnd(A, B, out, zero, carryOut, overflow, negative);
	input logic[WIDTH-1:0] A, B

	output logic[WIDTH-1:0] out; 
	output logic carryOut, overflow, zero, negative;
	
	genvar i;
	
generate 
		for(i=0; i<WIDTH; i++) begin : eachAndGate
			and thisAnd (out[i], A[i], .B[i]);
		end
endgenerate

assign carryOut = 0; 
assign overflow = 0;

endmodule