module decoder_recursive #(parameter WIDTH=32) (enable, in, out);

	//in theory this should make it so only powers of two work
	//i would like to use this here but it crashes my modelsim
	//thanks intel very cool
	
	//assert property (WIDTH && !(WIDTH & (WIDTH - 1)));
	
	input logic enable;
	localparam bits = $clog2(WIDTH)-1;
	input logic [bits:0] in;
	output logic [WIDTH-1:0] out;
	
	logic[(WIDTH/2)-1:0] tempOut;
	
	
	genvar i;
	
	//if only i could recursively create hardware irl
	generate
		//end case, I made it 5 instead of 3 just cause I already had the code for a 2x4 decoder
		if(WIDTH < 5) begin
			$display("Base Case started");
			always_comb begin
				 out[0] = enable & ~in[0] & ~in[1];
				 out[1] = enable & in[0] & ~in[1];
				 out[2] = enable & ~in[0] & in[1];
				 out[3] = enable & in[0] & in[1];
			end
		//else recurse, creating another of half size and then splitting the rest of the inputs with the last bit
		end else begin
			decoder_recursive #(.WIDTH(WIDTH/2)) decoder(.enable, .in(in[bits-1:0]), .out(tempOut));
			for(i = 0; i < (WIDTH-1); i++) begin : eachOut
				var temp = i/2;
				if(i % 2) begin
					always_comb begin
						out[i] = tempOut[temp] & ~in[bits];
					end
				end else begin
					always_comb begin
						out[i] = tempOut[temp] & in[bits];
					end
				end
			end
		end
	
	endgenerate
	
	
endmodule

module decoder_tb ();

	logic enable;
	logic [4:0] in;
	logic [31:0] out;
	
	decoder_recursive dut(.enable, .in, .out);
	
	logic CLOCK_50;
	
	parameter clk_PERIOD = 100;
	//creating a new detector to test along with appropriate variables.
	initial begin
		CLOCK_50 <= 0;
		forever #(clk_PERIOD / 2) CLOCK_50 <= ~CLOCK_50;
	end
	
	initial begin 
		enable = 1; in = 0; @(posedge CLOCK_50);
		enable = 1; in = 21; @(posedge CLOCK_50);
		enable = 1; in = 11; @(posedge CLOCK_50);
		enable = 1; in = 24; @(posedge CLOCK_50);
		enable = 0; in = 9; @(posedge CLOCK_50);
		enable = 0; in = 14; @(posedge CLOCK_50);
		
		@(posedge CLOCK_50);
		@(posedge CLOCK_50);
		//simulating a game
		$stop; 
	end


endmodule


/*

module decoder_5x32 (enable, in, out);
	input logic enable;
	input logic [4:0] in;
	output logic [31:0] out;
	
	logic[15:0] tempOut;
	
	decoder_4x16 decoder(.enable, .in(in[3:0]), .out(tempOut));
	
	genvar i;
	
	//i should probably just make this recursive too
	
	generate
		for(i = 0; i < 31; i++) begin : eachOut
			var temp = i/2;
			if(i % 2) begin
				always_comb begin
					out[i] = tempOut[temp] & ~in[4];
				end
			end else begin
				always_comb begin
					out[i] = tempOut[temp] & in[4];
				end
			end
		end
	endgenerate
		
	
endmodule

module decoder_4x16(enable, in, out);
	input logic enable;
	input logic [3:0] in;
	output logic [15:0] out;
	logic [7:0] tempOut;
	
	decoder_3x8 decoder(.enable, .in(in[2:0]), .out(tempOut));

	always_comb begin
		out[0] = tempOut[0] & ~in[3];
		out[1] = tempOut[0] & in[3];
		out[2] = tempOut[1] & ~in[3];
		out[3] = tempOut[1] & in[3];
		out[4] = tempOut[2] & ~in[3];
		out[5] = tempOut[2] & in[3];
		out[6] = tempOut[3] & ~in[3];
		out[7] = tempOut[3] & in[3];
		out[8] = tempOut[4] & ~in[3];
		out[9] = tempOut[4] & in[3];
		out[10] = tempOut[5] & ~in[3];
		out[11] = tempOut[5] & in[3];
		out[12] = tempOut[6] & ~in[3];
		out[13] = tempOut[6] & in[3];		
		out[14] = tempOut[7] & ~in[3];
		out[15] = tempOut[7] & in[3];
	
	end

endmodule



module decoder_3x8 (enable, in, out);
	input logic enable;
	input logic [2:0] in;
	output logic [7:0] out;
	
	logic [3:0] tempOut;
	
	decoder_2x4 decoder1(.enable, .in(in[1:0]), .out(tempOut));
	
	always_comb begin
		 out[0] = tempOut[0] & ~in[2];
		 out[1] = tempOut[0] & in[2];
		 out[2] = tempOut[1] & ~in[2];
		 out[3] = tempOut[1] & in[2];
		 out[4] = tempOut[2] & ~in[2];
		 out[5] = tempOut[2] & in[2];
		 out[6] = tempOut[3] & ~in[2];
		 out[7] = tempOut[3] & in[2];
	end
	
	
endmodule
	
	
module decoder_2x4 (enable, in, out);
	input logic enable;
	input logic [1:0] in;
	output logic [3:0] out;
	
	always_comb begin
		
		 out[0] = enable & ~in[0] & ~in[1];
		 out[1] = enable & ~in[0] & in[1];
		 out[2] = enable & in[0] & ~in[1];
		 out[3] = enable & in[0] & in[1];
		 
	 end
	
endmodule

*/
	