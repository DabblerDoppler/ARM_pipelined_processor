`timescale 1ps/1ps

module regfile (CLOCK_50, reg_write, wr_data, wr_reg, re_data_1, re_data_2, re_reg_1, re_reg_2, reset);
	input  logic  CLOCK_50; // clock
	input logic reg_write, reset;
	input logic [4:0] wr_reg, re_reg_1, re_reg_2;
	input logic [63:0] wr_data;
	output logic [63:0] re_data_1, re_data_2;
	
	logic [31:0] decoderOutput;
	logic [31:0][63:0] registerData ;
	
	
	genvar i;
	
	decoder_recursive decoder (.enable(reg_write), .in(wr_reg), .out(decoderOutput));
	
	
	//create 31 registers, plus a special one at the end that's always 0
	generate
		for(i=0; i<31; i++) begin : eachRegister
			register myRegister(.clk(CLOCK_50), .in(wr_data), .reset(reset), .enable(decoderOutput[i]), .out(registerData[i][63:0]));
		end
	
	endgenerate
	
	
	
	register myRegister(.clk(CLOCK_50), .in(0), .reset(1), .enable(0), .out(registerData[31][63:0]));
	
	
	logic [63:0][31:0] registerData_flipped;
	
	genvar j;
	
	
	//i was getting erros when trying to put ranges into the muxes like a normal human being
	//so here we are i guess
	generate
		for(i=0; i<64; i++) begin : eachBit_64
			for (j=0; j<32; j++) begin :eachBit_32
				always_comb begin
					registerData_flipped[i][j] = registerData[j][i];
				end
			end
		end
	endgenerate
	
	
	//create 64 muxes, one for each data bit, for each of two sets.
	generate
		for(i=0; i<64; i++) begin : eachMux
			//something's funky with registerData
			mux_recursive #(.WIDTH(32)) mux32_1 (.in(registerData_flipped[i][31:0]), .read(re_reg_1), .out(re_data_1[i]));
			mux_recursive #(.WIDTH(32)) mux32_2 (.in(registerData_flipped[i][31:0]), .read(re_reg_2), .out(re_data_2[i]));
		end
	endgenerate
	
	
endmodule


// This is the testbench for the top level module.
module DE1_SoC_testbench();
	logic  CLOCK_50; // 50 MHz clock
	logic reg_write, reset;
	logic [4:0] wr_reg, re_reg_1, re_reg_2;
	logic [63:0] wr_data;
	logic [63:0] re_data_1, re_data_2;
	
	parameter clk_PERIOD = 10000;
	//creating a new detector to test along with appropriate variables.
	initial begin
		CLOCK_50 <= 0;
		forever #(clk_PERIOD / 2) CLOCK_50 <= ~CLOCK_50;
	end
	
	regfile dut (.CLOCK_50, .reg_write, .wr_data, .wr_reg, .re_data_1, .re_data_2, .re_reg_1, .re_reg_2, .reset);

	
	initial begin 
		reset = 1; @(posedge CLOCK_50);
		reset = 0; reg_write = 1; wr_reg = 24; re_reg_1 = 24; re_reg_2 = 5; wr_data = 67; @(posedge CLOCK_50);                                                                                                                                                                 
		@(posedge CLOCK_50);
		reset = 0; reg_write = 1; wr_reg = 24; re_reg_1 = 24; re_reg_2 = 5; wr_data = 67; @(posedge CLOCK_50);     
		@(posedge CLOCK_50);
		@(posedge CLOCK_50);
		reset = 0; reg_write = 0; wr_reg = 22; re_reg_1 = 24; re_reg_2 = 22; wr_data = 184; @(posedge CLOCK_50);   
		@(posedge CLOCK_50);
		@(posedge CLOCK_50); 
		reset = 1; reg_write = 0; wr_reg = 24; re_reg_1 = 24; re_reg_2 = 5; wr_data = 67; @(posedge CLOCK_50);  
		@(posedge CLOCK_50); 
		$stop; 
	end

endmodule
